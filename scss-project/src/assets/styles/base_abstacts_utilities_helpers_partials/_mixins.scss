@mixin link {
  color: $secondary-color;
  list-style: unset;
  padding: 0;
  display: inline-block;
  margin-right: 10px;
  text-decoration: unset;
}

@mixin large-text {
  font: {
    // font we can create this way
    size: 22px;
    weight: bold;
  }
}

// mixins with arguments
@mixin box($radius: 3px, $border: 1px solid #000) {
  @include rounded($radius);
  border: $border;
}

@mixin rounded($radius: 6px) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
}

// @mixin box($radius, $border) {
//   @include rounded($radius);
//   border: $border;
// }

//   @mixin rounded($radius) {
//     border-radius: $radius;
//     -webkit-border-radius: $radius;
//     -moz-border-radius: $radius;
//     -ms-border-radius: $radius;
//     -o-border-radius: $radius;
// }

@mixin box-shadow($shadow...) {
  // mixin multiple list
  box-shadow: $shadow;
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  -ms-box-shadow: $shadow;
  -o-box-shadow: $shadow;
}

// passing content into mixin and browser specific directive
@mixin apply-to-ie-6 {
  * html {
    @content;
  }
}

@mixin fancy-links {
  a {
    font-style: italic;
    text-decoration: none;
  }
}

// === Brand ===
@mixin blue-beans {
  @if $brand == blue-beans {
    @content;
  }
}

@mixin rogers-rovers {
  @if $brand == rogers-rovers {
    @content;
  }
}

@mixin pastry-pizza {
  @if $brand == pastry-pizza {
    @content;
  }
}

// === MEDIA QUERIES ===
@mixin tiny-screens() {
  @media only screen and (max-width: 320px) {
    @content;
  }
}

@mixin small-screens() {
  @media only screen and (max-width: 480px) {
    @content;
  }
}

@mixin medium-screens() {
  @media only screen and (max-width: 640px) {
    @content;
  }
}

@mixin medium-large-screens() {
  @media only screen and (max-width: 960px) {
    @content;
  }
}

@mixin google-font($font) {
  $font: unquote($font);
  @import url(https://fonts.googleapis.com/css?family=#{$font});
}

@mixin font-smoothing($value:on){
  @if $value == on{
    -webkit-font-smoothing:antialiased;
    -moz-osx-font-smoothing:grayscale;
  }
  @else{
    -webkit-font-smoothing:subpixel-antialiased;
    -moz-osx-font-smoothing:auto;
  }
}

@mixin triangle($size, $color, $direction) {

  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;

    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;

    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }

  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;

    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }

  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;

    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;

  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;

  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;

  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
  $list:();
  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: append($list, $str, comma);
  }
  transition: $list;
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &::-moz-placeholder {opacity: 1; @content}
  &:-moz-placeholder {@content}
  &:-ms-input-placeholder {@content}
  &.placeholder {@content}
}